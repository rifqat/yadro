import numpy as np
import pandas as pd
from scipy.spatial.distance import pdist, squareform, cdist
import matplotlib.pyplot as plt
from sklearn.preprocessing import StandardScaler

# Sample data
x1 = np.array([
    [1, 2], [1, 3], [2, 2], [2, 3], [3, 4], [7, 2], [7, 3], [8, 2], [8, 3], [9, 4],
    [8, 8], [8, 9], [9, 8], [9, 9], [10, 10], [4, 5], [6, 5], [6, 7],
])

from sklearn import datasets
n_samples = 500
seed = 30
noisy_circles = datasets.make_circles(
    n_samples=n_samples, factor=0.5, noise=0.05, random_state=seed
)
noisy_moons = datasets.make_moons(n_samples=n_samples, noise=0.05, random_state=seed)
blobs = datasets.make_blobs(n_samples=n_samples, random_state=seed)
rng = np.random.RandomState(seed)
no_structure = rng.rand(n_samples, 2), None

# Anisotropicly distributed data
random_state = 170
X, y = datasets.make_blobs(n_samples=n_samples, random_state=random_state)
transformation = [[0.6, -0.6], [-0.4, 0.8]]
X_aniso = np.dot(X, transformation)
aniso = (X_aniso, y)

# blobs with varied variances
varied = datasets.make_blobs(
    n_samples=n_samples, cluster_std=[1.0, 2.5, 0.5], random_state=random_state
)

datasets = [
    (
        noisy_circles,
        {
            "damping": 0.77,
            "preference": -240,
            "quantile": 0.2,
            "n_clusters": 2,
            "min_samples": 7,
            "xi": 0.08,
        },
    ),
    (
        noisy_moons,
        {
            "damping": 0.75,
            "preference": -220,
            "n_clusters": 2,
            "min_samples": 7,
            "xi": 0.1,
        },
    ),
    (
        varied,
        {
            "eps": 0.18,
            "n_neighbors": 2,
            "min_samples": 7,
            "xi": 0.01,
            "min_cluster_size": 0.2,
        },
    ),
    (
        aniso,
        {
            "eps": 0.15,
            "n_neighbors": 2,
            "min_samples": 7,
            "xi": 0.1,
            "min_cluster_size": 0.2,
        },
    ),
    (blobs, {"min_samples": 7, "xi": 0.1, "min_cluster_size": 0.2}),
    (no_structure, {}),
]

data,y=datasets[3][0]


# Create a scatter plot
plt.figure(figsize=(8, 6))
plt.scatter(data[:, 0], data[:, 1], c='blue', label='x1 points')
plt.xlabel('X-axis')
plt.ylabel('Y-axis')
plt.title('Scatter Plot of x1 Points')
plt.grid(True)
plt.legend()
plt.show()


import networkx as nx
import numpy as np
import matplotlib.pyplot as plt

# Ma'lumotlarni graf ko'rinishida yaratish
def create_graph(data, epsilon):
    G = nx.Graph()
    for i in range(len(data)):
        for j in range(i + 1, len(data)):
            distance = np.linalg.norm(data[i] - data[j])
            if distance < epsilon:
                G.add_edge(i, j, weight=distance)
    return G

# Zichlikni hisoblash
def compute_density(G):
    densities = {}
    for node in G.nodes:
        neighbors = list(G.neighbors(node))
        densities[node] = len(neighbors) / len(G.nodes)
    return densities

# Klasterlarni GDVA asosida aniqlash
def detect_clusters(G, density_threshold):
    densities = compute_density(G)
    #print(densities)
    clusters = []
    visited = set()

    for node in G.nodes:
        if densities[node] >= density_threshold and node not in visited:
            cluster = []
            queue = [node]
            while queue:
                n = queue.pop(0)
                if n not in visited:
                    visited.add(n)
                    cluster.append(n)
                    queue.extend([neigh for neigh in G.neighbors(n) if densities[neigh] >= density_threshold])
            clusters.append(cluster)
    return clusters

# Sintetik ma'lumotlar yaratish
#data = np.random.rand(20, 2)  # 20 ta random nuqta
'''

'''

epsilon = 0.3
density_threshold = 0.01

# Graf yaratish va klasterlarni aniqlash
G = create_graph(data, epsilon)
clusters = detect_clusters(G, density_threshold)

# Klasterlarni tasvirlash
pos = {i: data[i] for i in range(len(data))}
colors = ['r', 'g', 'b', 'y', 'c', 'm']

for idx, cluster in enumerate(clusters):
    nx.draw_networkx_nodes(G, pos, nodelist=cluster, node_color=colors[idx % len(colors)], node_size=25)
nx.draw_networkx_edges(G, pos, alpha=0.5)
plt.show()



